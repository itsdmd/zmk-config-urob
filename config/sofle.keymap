/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "mouse.dtsi"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

&caps_word { continue-list = <UNDERSCORE BACKSPACE DELETE LEFT RIGHT UP DOWN MINUS>; };

&lt {
    quick-tap-ms = <170>;
    require-prior-idle-ms = <150>;
};

&sk {
    lazy;
    release-after-ms = <1500>;
    quick-release;
};

&sl { release-after-ms = <500>; };

/ {
    conditional_layers { compatible = "zmk,conditional-layers"; };

    combos {
        compatible = "zmk,combos";

        combo_knobs_softoff {
            bindings = <&soft_off>;
            key-positions = <42 43>;
            timeout-ms = <500>;
            slow-release;
            require-prior-idle-ms = <1000>;
        };

        combo_to_base_hrm_l {
            bindings = <&to 0>;
            key-positions = <39 40>;
            timeout-ms = <80>;
            slow-release;
            require-prior-idle-ms = <300>;
            layers = <1 2 3 4 5 6>;
        };

        combo_to_base_hrm_r {
            bindings = <&to 0>;
            key-positions = <45 46>;
            timeout-ms = <80>;
            slow-release;
            require-prior-idle-ms = <300>;
            layers = <1 2 3 4 5 6>;
        };

        combo_to_base_normal_l {
            bindings = <&to 1>;
            key-positions = <40 38>;
            timeout-ms = <80>;
            slow-release;
            require-prior-idle-ms = <300>;
            layers = <0 2 3 4 5 6>;
        };

        combo_to_base_normal_r {
            bindings = <&to 1>;
            key-positions = <45 47>;
            timeout-ms = <80>;
            slow-release;
            require-prior-idle-ms = <300>;
            layers = <0 2 3 4 5 6>;
        };

        combo_to_qwerty_l {
            bindings = <&to 3>;
            key-positions = <37 38>;
            slow-release;
            timeout-ms = <100>;
            layers = <0 1 6 4 2 5>;
            require-prior-idle-ms = <300>;
        };

        combo_to_qwerty_r {
            bindings = <&to 3>;
            key-positions = <48 47>;
            timeout-ms = <100>;
            slow-release;
            require-prior-idle-ms = <300>;
            layers = <0 1 6 4 2 5>;
        };

        combo_to_qwerty_mir_l {
            bindings = <&to 4>;
            key-positions = <37 38>;
            slow-release;
            timeout-ms = <100>;
            layers = <3>;
            require-prior-idle-ms = <300>;
        };

        combo_to_qwerty_mir_r {
            bindings = <&to 4>;
            key-positions = <47 48>;
            timeout-ms = <100>;
            slow-release;
            require-prior-idle-ms = <300>;
            layers = <3>;
        };

        combo_to_extended_l {
            bindings = <&to 5>;
            key-positions = <4 2 3>;
            slow-release;
            timeout-ms = <120>;
            require-prior-idle-ms = <300>;
        };

        combo_to_extended_r {
            bindings = <&to 5>;
            key-positions = <7 8 9>;
            timeout-ms = <120>;
            slow-release;
            require-prior-idle-ms = <300>;
        };

        combo_to_extra_l {
            bindings = <&to 6>;
            key-positions = <38 39>;
            timeout-ms = <170>;
            slow-release;
            require-prior-idle-ms = <300>;
            layers = <0 1 2 3 4 5>;
        };

        combo_to_extra_r {
            bindings = <&to 6>;
            key-positions = <46 47>;
            timeout-ms = <170>;
            slow-release;
            require-prior-idle-ms = <300>;
        };

        combo_mo_extra_1 {
            bindings = <&mo 6>;
            key-positions = <53 24>;
            timeout-ms = <120>;
            require-prior-idle-ms = <250>;
        };

        combo_mo_extra_2 {
            bindings = <&mo 6>;
            key-positions = <56 35>;
            timeout-ms = <150>;
            require-prior-idle-ms = <250>;
        };

        combo_mo_extra_3 {
            bindings = <&mo 6>;
            key-positions = <56 53>;
            timeout-ms = <150>;
            require-prior-idle-ms = <250>;
        };

        combo_sk_lshft {
            bindings = <&sk LSHFT>;
            key-positions = <28 31>;
            timeout-ms = <80>;
            slow-release;
            require-prior-idle-ms = <150>;
        };

        combo_sk_lctrl {
            bindings = <&sk LCTRL>;
            key-positions = <27 32>;
            timeout-ms = <80>;
            slow-release;
            require-prior-idle-ms = <150>;
        };

        combo_sk_lalt {
            bindings = <&sk LALT>;
            key-positions = <26 33>;
            timeout-ms = <80>;
            slow-release;
            require-prior-idle-ms = <150>;
        };

        combo_kp_gui {
            bindings = <&kp LGUI>;
            key-positions = <25 34>;
            timeout-ms = <80>;
            slow-release;
            require-prior-idle-ms = <170>;
        };

        combo_CS_l {
            bindings = <&sk LS(LCTRL)>;
            key-positions = <16 15>;
            require-prior-idle-ms = <170>;
            timeout-ms = <80>;
            slow-release;
            layers = <0 1 5>;
        };

        combo_CS_r {
            bindings = <&sk LS(LCTRL)>;
            key-positions = <19 20>;
            timeout-ms = <80>;
            require-prior-idle-ms = <170>;
            slow-release;
            layers = <0 1 5>;
        };

        combo_CA_l {
            bindings = <&sk LA(LCTRL)>;
            key-positions = <14 15>;
            timeout-ms = <80>;
            require-prior-idle-ms = <170>;
            slow-release;
            layers = <0 1 5>;
        };

        combo_CA_r {
            bindings = <&sk LA(LCTRL)>;
            key-positions = <21 20>;
            timeout-ms = <80>;
            require-prior-idle-ms = <170>;
            slow-release;
            layers = <0 1 5>;
        };

        combo_CAS_l {
            bindings = <&sk LA(LS(LCTRL))>;
            key-positions = <15 14 16>;
            timeout-ms = <100>;
            require-prior-idle-ms = <170>;
            slow-release;
            layers = <0 1 5>;
        };

        combo_CAS_r {
            bindings = <&sk LA(LS(LCTRL))>;
            key-positions = <20 21 19>;
            timeout-ms = <100>;
            require-prior-idle-ms = <170>;
            slow-release;
            layers = <0 1 5>;
        };

        combo_kt_lshft {
            bindings = <&kt LSHFT>;
            key-positions = <16 29>;
            timeout-ms = <80>;
            require-prior-idle-ms = <170>;
            slow-release;
            layers = <0 1 5>;
        };

        combo_kt_lctrl {
            bindings = <&kt LCTRL>;
            key-positions = <19 30>;
            timeout-ms = <80>;
            require-prior-idle-ms = <170>;
            slow-release;
            layers = <0 1 5>;
        };

        combo_kt_lgui {
            bindings = <&kt LGUI>;
            key-positions = <18 19>;
            timeout-ms = <80>;
            slow-release;
            require-prior-idle-ms = <170>;
            layers = <0 1 5>;
        };

        combo_kt_lalt {
            bindings = <&kt LALT>;
            key-positions = <16 17>;
            timeout-ms = <80>;
            slow-release;
            require-prior-idle-ms = <170>;
            layers = <0 1 5>;
        };

        combo_repeat_l {
            bindings = <&key_repeat>;
            key-positions = <27 26>;
            timeout-ms = <50>;
            slow-release;
            require-prior-idle-ms = <150>;
            layers = <0 1 5>;
        };

        combo_repeat_r {
            bindings = <&key_repeat>;
            key-positions = <33 32>;
            slow-release;
            require-prior-idle-ms = <150>;
            timeout-ms = <50>;
            layers = <0 1 5>;
        };

        combo_space {
            bindings = <&kp SPACE>;
            key-positions = <25 29>;
            slow-release;
            require-prior-idle-ms = <100>;
            timeout-ms = <50>;
        };

        combo_enter {
            bindings = <&kp ENTER>;
            key-positions = <34 30>;
            slow-release;
            require-prior-idle-ms = <100>;
            timeout-ms = <50>;
        };

        combo_under {
            bindings = <&kp UNDER>;
            key-positions = <45 40>;
            timeout-ms = <150>;
            slow-release;
            require-prior-idle-ms = <100>;
            layers = <0 1 5 6>;
        };

        combo_fslh {
            bindings = <&kp FSLH>;
            key-positions = <46 39>;
            timeout-ms = <150>;
            slow-release;
            require-prior-idle-ms = <100>;
            layers = <0 1 5 6>;
        };

        combo_bslh {
            bindings = <&kp BSLH>;
            key-positions = <38 47>;
            timeout-ms = <150>;
            slow-release;
            require-prior-idle-ms = <100>;
            layers = <0 1 5 6>;
        };

        combo_pipe {
            bindings = <&kp PIPE>;
            key-positions = <48 37>;
            timeout-ms = <170>;
            slow-release;
            require-prior-idle-ms = <100>;
            layers = <0 1 5 6>;
        };

        combo_capsw {
            bindings = <&caps_word>;
            key-positions = <29 30>;
            timeout-ms = <100>;
            require-prior-idle-ms = <170>;
            slow-release;
            layers = <0>;
        };

        combo_playpause {
            bindings = <&kp C_PP>;
            key-positions = <7 8>;
            timeout-ms = <150>;
            slow-release;
            require-prior-idle-ms = <170>;
        };

        combo_prev {
            bindings = <&kp C_PREV>;
            key-positions = <7 6>;
            timeout-ms = <150>;
            slow-release;
            require-prior-idle-ms = <170>;
        };

        combo_next {
            bindings = <&kp C_NEXT>;
            key-positions = <9 8>;
            timeout-ms = <150>;
            slow-release;
            require-prior-idle-ms = <170>;
        };

        combo_volup {
            bindings = <&mm_alt_volup_briup>;
            key-positions = <3 4>;
            timeout-ms = <150>;
            slow-release;
            require-prior-idle-ms = <170>;
        };

        combo_voldn {
            bindings = <&mm_alt_voldn_bridn>;
            key-positions = <3 2>;
            timeout-ms = <150>;
            slow-release;
            require-prior-idle-ms = <170>;
        };

        combo_mute {
            bindings = <&kp C_MUTE>;
            key-positions = <2 1>;
            timeout-ms = <150>;
            slow-release;
            require-prior-idle-ms = <170>;
        };
    };

    macros {
        macro_two_spaces: four_spaces {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp SPACE>;
            label = "FOUR_SPACES";
        };

        macro_superhot: superhot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(I) &kp T &kp S &kp LS(D) &kp LS(M) &kp LS(D) &kp N2 &kp N5 &kp N1 &kp N0 &kp N1 &kp N5 &kp N0 &kp N7>;
            label = "SUPERHOT";
        };

        macro_hyperheat: hyperheat {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DLLR &kp LS(O) &kp LS(N) &kp D &kp LS(E) &kp LS(R) &kp LS(K) &kp LS(R) &kp AT &kp LS(F) &kp LS(T) &kp LS(F) &kp AT &kp LS(H) &kp LS(R) &kp LS(Z) &kp LS(E) &kp LS(U) &kp LS(G) &kp SPACE &kp N1 &kp N8 &kp N2>;
            label = "HYPERHEAT";
        };

        macro_email_dd431: email_dd431 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp D &kp U &kp C &kp DOT &kp D &kp A &kp O &kp DOT &kp N4 &kp N3 &kp N1 &kp AT &kp G &kp M &kp A &kp I &kp L &kp DOT &kp C &kp O &kp M>;
            label = "EMAIL_DD431";
        };

        macro_plus_equal: plus_equ {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp PLUS &kp EQUAL>;
            label = "PLUS_EQU";
        };
    };

    behaviors {
        ht_kp_kp: ht_kp_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "HT | KP / KP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            flavor = "tap-preferred";
        };

        td_S_CS: td_S_CS {
            compatible = "zmk,behavior-tap-dance";
            label = "TD | S / CS";
            #binding-cells = <0>;
            bindings = <&kp LSHFT>, <&kp LC(LSHIFT)>;
        };

        td_C_CA: td_C_CA {
            compatible = "zmk,behavior-tap-dance";
            label = "TD | C / CA";
            #binding-cells = <0>;
            bindings = <&kp LCTRL>, <&kp LC(LALT)>;
        };

        ht_capw: ht_capw {
            compatible = "zmk,behavior-hold-tap";
            label = "HT | CAPW";
            bindings = <&kp>, <&caps_word>;

            #binding-cells = <2>;
            tapping-term-ms = <170>;
        };

        ht170_kp_kp: ht170_kp_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "HT170 | KP / KP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <170>;
        };

        fuego: fuego {
            compatible = "zmk,behavior-hold-tap";
            label = "FUEGO";
            bindings = <&macro_hyperheat>, <&macro_superhot>;

            #binding-cells = <2>;
            tapping-term-ms = <500>;
        };

        email_1: email_1 {
            compatible = "zmk,behavior-hold-tap";
            label = "EMAIL_1";
            bindings = <&macro_email_dd431>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        ht500_kp_kp: ht500_kp_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "HT500 | KP / KP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <500>;
            flavor = "tap-preferred";
        };

        plus_equal: plus_equal {
            compatible = "zmk,behavior-hold-tap";
            label = "PLUS_EQUAL";
            bindings = <&macro_plus_equal>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <120>;
            flavor = "tap-preferred";
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <170>;
            require-prior-idle-ms = <100>;
            flavor = "balanced";
        };

        mm_alt_volup_briup: mm_alt_volup_briup {
            compatible = "zmk,behavior-mod-morph";
            label = "MM / ALT | VOL_UP / BRI_UP";
            bindings = <&kp C_VOL_UP>, <&kp C_BRI_UP>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        mm_alt_voldn_bridn: mm_alt_voldn_bridn {
            compatible = "zmk,behavior-mod-morph";
            label = "MM / ALT | VOLDN / BRIDN";
            bindings = <&kp C_VOL_DN>, <&kp C_BRI_DN>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        ht_mo_sl: ht_mo_sl {
            compatible = "zmk,behavior-hold-tap";
            label = "HT | MO / SL";
            bindings = <&mo>, <&sl>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        mm_S_kp0_0: mm_S_kp0_0 {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_S_KP0_0";
            bindings = <&kp KP_N0>, <&kp LS(N0)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_S_kp1_1: mm_S_kp1_1 {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_S_KP1_1";
            bindings = <&kp KP_N1>, <&kp LS(N1)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_S_kp2_2: mm_S_kp2_2 {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_S_KP2_2";
            bindings = <&kp KP_N2>, <&kp LS(N2)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_S_kp3_3: mm_S_kp3_3 {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_S_KP3_3";
            bindings = <&kp KP_N3>, <&kp LS(N3)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_S_kp4_4: mm_S_kp4_4 {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_S_KP4_4";
            bindings = <&kp KP_N4>, <&kp LS(N4)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_S_kp5_5: mm_S_kp5_5 {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_S_KP5_5";
            bindings = <&kp KP_N5>, <&kp LS(N5)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_S_kp6_6: mm_S_kp6_6 {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_S_KP6_6";
            bindings = <&kp KP_N6>, <&kp LS(N6)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_S_kp7_7: mm_S_kp7_7 {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_S_KP7_7";
            bindings = <&kp KP_N7>, <&kp LS(N7)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_S_kp8_8: mm_S_kp8_8 {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_S_KP8_8";
            bindings = <&kp KP_N8>, <&kp LS(N8)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_S_kp9_9: mm_S_kp9_9 {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_S_KP9_9";
            bindings = <&kp KP_N9>, <&kp LS(N9)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        hrm_r: hrm_r {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_R";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <2000>;
            quick-tap-ms = <80>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <18 19 20 21 22 30 31 32 33 34 44 45 46 47 48>;
        };

        hrm_l: hrm_l {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_L";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <2000>;
            quick-tap-ms = <80>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <13 14 15 16 17 25 26 27 28 29 37 38 39 40 41>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_base_hrm {
            display-name = "base-hrm";
            bindings = <
&ht_kp_kp GRAVE ESC  &kp LS(N1)     &email_1 0 LS(N2)  &kp LS(N3)      &kp LS(N4)      &kp LS(N5)                                   &kp LS(N6)   &kp LS(N7)      &kp LS(N8)      &kp UNDER      &kp BSLH       &ht_capw CAPS 0
&kp TAB              &kp Q          &kp W              &kp F           &kp P           &kp G                                        &kp J        &kp L           &kp U           &kp Y          &kp SEMI       &ht_kp_kp LBRC LBKT
&kp BSPC             &hrm_l LGUI A  &hrm_l LEFT_ALT R  &hrm_l LCTRL S  &hrm_l LSHFT T  &kp D                                        &kp H        &hrm_r LSHFT N  &hrm_r LCTRL E  &hrm_r LALT I  &hrm_r LGUI O  &kp APOS
&kp PG_UP            &kp Z          &kp X              &kp C           &kp V           &kp B        &kt LSHFT        &kt LCTRL      &kp K        &kp M           &kp COMMA       &kp DOT        &kp FSLH       &kp PG_DN
                                    &kp LGUI           &kp LC(LEFT)    &kp DEL         &lt 5 ENTER  &ht_mo_sl 2 7    &ht_mo_sl 2 7  &lt 5 SPACE  &kp TAB         &kp LC(RIGHT)   &to 1
            >;

            sensor-bindings =
                <&inc_dec_kp DOWN UP>,
                <&inc_dec_kp LC(RIGHT) LC(LEFT)>;

            label = "Base HRM";
        };

        layer_base_normal {
            display-name = "base-normal";
            bindings = <
&ht_kp_kp GRAVE ESC  &kp LS(N1)  &email_1 0 LS(N2)  &kp LS(N3)  &kp LS(N4)  &kp LS(N5)                                   &kp LS(N6)   &kp LS(N7)  &kp LS(N8)  &kp UNDER  &kp LS(N0)  &ht_capw CAPS 0
&kp TAB              &kp Q       &kp W              &kp F       &kp P       &kp G                                        &kp J        &kp L       &kp U       &kp Y      &kp SEMI    &kp LBKT
&kp BSPC             &kp A       &kp R              &kp S       &kp T       &kp D                                        &kp H        &kp N       &kp E       &kp I      &kp O       &kp APOS
&kp PG_UP            &kp Z       &kp X              &kp C       &kp V       &kp B        &kt LSHFT        &kt LCTRL      &kp K        &kp M       &kp COMMA   &kp DOT    &kp FSLH    &kp PG_DN
                                 &kp LGUI           &kp LALT    &kp DEL     &lt 5 ENTER  &ht_mo_sl 2 7    &ht_mo_sl 2 7  &lt 5 SPACE  &kp TAB     &kp LALT    &to 0
            >;

            sensor-bindings =
                <&inc_dec_kp DOWN UP>,
                <&inc_dec_kp LC(RIGHT) LC(LEFT)>;

            label = "Base Normal";
        };

        layer_base_normal_mir {
            display-name = "base-normal-mir";
            bindings = <
&ht_capw CAPS 0  &kp LS(N0)  &kp UNDER  &kp LS(N8)  &kp LS(N7)  &kp LS(N6)                           &kp LS(N5)   &kp LS(N4)  &kp LS(N3)  &kp N2    &kp LS(N1)  &ht_kp_kp GRAVE ESC
&kp LBKT         &kp SEMI    &kp Y      &kp U       &kp L       &kp J                                &kp G        &kp P       &kp F       &kp W     &kp Q       &kp TAB
&kp APOS         &kp O       &kp I      &kp E       &kp N       &kp H                                &kp D        &kp T       &kp S       &kp R     &kp A       &kp BSPC
&kp PG_DN        &kp FSLH    &kp DOT    &kp COMMA   &kp M       &kp K        &kt LSHFT    &kt LCTRL  &kp B        &kp V       &kp C       &kp X     &kp Z       &kp PG_UP
                             &kp LGUI   &kp LALT    &kp TAB     &lt 5 SPACE  &none        &none      &lt 5 ENTER  &kp DEL     &kp LALT    &kp LGUI
            >;

            sensor-bindings =
                <&inc_dec_kp LC(RIGHT) LC(LEFT)>,
                <&inc_dec_kp DOWN UP>;

            label = "Base Normal Mirrored";
        };

        layer_qwerty {
            display-name = "qwerty";
            bindings = <
&ht_kp_kp GRAVE ESC  &kp N1  &kp N2    &kp N3    &kp N4     &kp N5                               &kp N6       &kp N7     &kp N8     &kp N9   &kp N0    &ht_capw CAPS 0
&kp TAB              &kp Q   &kp W     &kp E     &kp R      &kp T                                &kp Y        &kp U      &kp I      &kp O    &kp P     &kp LBKT
&kt BSPC             &kp A   &kp S     &kp D     &kp F      &kp G                                &kp H        &kp J      &kp K      &kp L    &kp SEMI  &kp APOS
&kp PG_UP            &kp Z   &kp X     &kp C     &kp V      &kp B        &kt LSHFT    &kt LCTRL  &kp N        &kp M      &kp COMMA  &kp DOT  &kp FSLH  &kp PG_DN
                             &kp LGUI  &kp LALT  &kp LCTRL  &lt 5 ENTER  &kp LSHFT    &td_C_CA   &lt 5 SPACE  &kp LSHFT  &kp LALT   &to 0
            >;

            sensor-bindings =
                <&inc_dec_kp DOWN UP>,
                <&inc_dec_kp LC(RIGHT) LC(LEFT)>;

            label = "QWERTY";
        };

        layer_qwerty_mir {
            display-name = "qwerty-mir";
            bindings = <
&ht_kp_kp GRAVE ESC  &kp N0    &kp N9    &kp N8     &kp N7     &kp N6                               &kp N5       &kp N4  &kp N3  &kp N2  &kp N1  &ht_capw CAPS 0
&kp LBKT             &kp P     &kp O     &kp I      &kp U      &kp Y                                &kp T        &kp R   &kp E   &kp W   &kp Q   &kp TAB
&kp DEL              &kp SEMI  &kp L     &kp K      &kp J      &kp H                                &kp G        &kp F   &kp D   &kp S   &kp A   &kp BSPC
&kp PG_DN            &kp FSLH  &kp DOT   &kp COMMA  &kp M      &kp N        &kt LSHFT    &kt LCTRL  &kp B        &kp V   &kp C   &kp X   &kp Z   &kp PG_UP
                               &kp LGUI  &kp LALT   &kp LSHFT  &lt 5 SPACE  &kp LCTRL    &td_S_CS   &lt 5 ENTER  &trans  &to 0   &trans
            >;

            label = "QWERTY Mirrored";
            sensor-bindings =
                <&inc_dec_kp LC(RIGHT) LC(LEFT)>,
                <&inc_dec_kp DOWN UP>;
        };

        layer_extended {
            display-name = "extended";
            bindings = <
&kp LA(F4)         &ht_kp_kp F13 F1           &ht_kp_kp F14 F2  &ht_kp_kp F15 F3  &ht_kp_kp F16 F4  &ht_kp_kp F17 F5                                                      &ht_kp_kp F18 F6        &ht_kp_kp F19 F7    &ht_kp_kp F20 F8       &ht_kp_kp F21 F9  &ht_kp_kp F22 F10     &kp PSCRN
&macro_two_spaces  &kp ESC                    &mm_S_kp7_7       &mm_S_kp8_8       &mm_S_kp9_9       &ht_kp_kp F23 F11                                                     &ht_kp_kp F24 F12       &plus_equal 0 PLUS  &ht_kp_kp UNDER MINUS  &kp ASTRK         &ht_kp_kp QMARK FSLH  &ht_kp_kp RBRC RBKT
&kp DEL            &mm_S_kp0_0                &mm_S_kp4_4       &mm_S_kp5_5       &mm_S_kp6_6       &kp EQUAL                                                             &kp HOME                &kp LEFT            &kp DOWN               &kp UP            &kp RIGHT             &kp END
&kp PG_DN          &ht_kp_kp LS(GRAVE) GRAVE  &mm_S_kp1_1       &mm_S_kp2_2       &mm_S_kp3_3       &kp INS                 &kp C_AL_CALC         &kp C_AL_MY_COMPUTER    &kp SCROLLLOCK          &kp KP_NUMLOCK      &msc SCRL_DOWN         &msc SCRL_UP      &kp BSLH              &kp PG_UP
                                              &mkp MB3          &mkp MB2          &mkp MB1          &ht170_kp_kp RPAR LPAR  &ht170_kp_kp GT LT    &ht170_kp_kp RBKT LBKT  &ht170_kp_kp RBRC LBRC  &mkp MB1            &mkp MB2               &mkp MB3
            >;

            sensor-bindings =
                <&inc_dec_kp LC(LS(DOWN)) LC(LS(UP))>,
                <&inc_dec_kp LC(LS(RIGHT)) LC(LS(LEFT))>;

            label = "Extended";
        };

        layer_extra {
            display-name = "extra";
            bindings = <
&fuego 0 0  &bt BT_SEL 0       &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                                &bt BT_SEL 4               &bt BT_SEL 3    &bt BT_SEL 2      &bt BT_SEL 1  &bt BT_SEL 0     &bt BT_CLR
&kp TAB     &kp LS(LC(LA(Q)))  &none         &none         &none         &kp C_BRI_UP                                &kp C_VOL_UP               &msc SCRL_LEFT  &msc SCRL_DOWN    &msc SCRL_UP  &msc SCRL_RIGHT  &msc MOVE_DOWN
&kp BSPC    &none              &mkp MCLK     &mkp RCLK     &mkp LCLK     &kp C_BRI_DN                                &ht_kp_kp C_MUTE C_VOL_DN  &mmv MOVE_LEFT  &mmv MOVE_DOWN    &mmv MOVE_UP  &mmv MOVE_RIGHT  &msc MOVE_UP
&soft_off   &none              &none         &mkp MB5      &mkp MB4      &bootloader   &kp C_POWER    &kp C_RESET    &bootloader                &kp C_PREV      &kp C_PLAY_PAUSE  &kp C_NEXT    &none            &soft_off
                               &to 0         &sys_reset    &none         &kp ENTER     &kp C_SLEEP    &kp C_AL_LOCK  &kp SPACE                  &none           &sys_reset        &to 0
            >;

            label = "Extra";
            sensor-bindings =
                <&inc_dec_kp LC(DEL) LC(BSPC)>,
                <&inc_dec_kp DEL BSPC>;
        };

        layer_mods {
            display-name = "mods";
            bindings = <
&none     &none     &none     &none      &none      &none                           &none     &none      &none      &none     &none     &none
&none     &none     &none     &none      &none      &none                           &none     &none      &none      &none     &none     &none
&kp LGUI  &sk LGUI  &sk LALT  &sk LCTRL  &sk LSHFT  &none                           &none     &sk RSHFT  &sk RCTRL  &sk RALT  &sk RGUI  &kp RGUI
&none     &none     &kp LALT  &kp LCTRL  &kp LSHFT  &none     &none       &none     &none     &kp RSHFT  &kp RCTRL  &kp RALT  &none     &none
                    &mkp MB5  &mkp MB4   &mkp MB2   &mkp MB1  &mkp MB3    &mkp MB3  &mkp MB1  &mkp MB2   &mkp MB4   &mkp MB5
            >;

            label = "Mods";
        };
    };
};
